⦁	Java - Java є високорівневою мовою програмування, яка використовується для розробки веб-сайтів, додатків та інших програм.
Приклади: Я написав просту програму на Java для обчислення факторіала числа 5. Якщо ви хочете розробити веб-додаток на Java, то вам знадобляться знання фреймворку Spring.

⦁	Object-oriented programming (ООП) - це підхід до програмування, де програма складається з об'єктів, які взаємодіють один з одним.
Приклади: В ООП, класи є основною одиницею програми. Наприклад, ви можете створити клас "Автомобіль", який містить методи "запустити" та "зупинити". У Java ООП є основним підходом до програмування.

⦁	IDE (Integrated Development Environment) - це програмне забезпечення, яке дозволяє розробникам писати, тестувати та налагоджувати програми в зручному середовищі.
Приклади: IntelliJ IDEA та Eclipse - це приклади популярних IDE для розробки Java-програм. У IDE є багато корисних функцій, таких як автодоповнення коду та налагодження програм.

⦁	Compiler - це програмне забезпечення, яке перетворює вихідний код програми з мови програмування на машинний код, який може виконуватися комп'ютером.
Приклади: У Java є власний компілятор, який можна використовувати з командного рядка. Також є багато онлайн-компіляторів, таких як OnlineGDB та CodeChef,
 які дозволяють скомпілювати та запустити код в браузері.

⦁	Debugger - це програмне забезпечення, яке дозволяє розробникам відстежувати та виправляти помилкив програмах під час виконання програми.
  Приклади: У Java є власний debugger, який можна використовувати в IntelliJ IDEA або Eclipse. Також є багато інших debugger-ів, таких як jdb,
 jVisualVM та NetBeans Debugger.

⦁	Framework - це набір засобів та бібліотек, які дозволяють розробникам швидко розробляти програми.
Приклади: Spring та Hibernate є популярними фреймворками для розробки Java-додатків. У фреймворках є багато готових рішень для проблем, 
які можуть виникнути під час розробки програм.

⦁	Maven - це інструмент для управління проектами та залежностями у Java-програмах.
Приклади: Maven дозволяє легко додавати залежності у проект, такі як фреймворки та бібліотеки, та автоматично встановлює їх. 
Використання Maven дозволяє легко оновлювати та додавати залежності без необхідності вручну завантажувати та установлювати їх.

⦁	Git - це система контролю версій, яка дозволяє розробникам зберігати та керувати відстеженням змін у програмному коді.
Приклади: Git є найпопулярнішою системою контролю версій серед розробників. 
Git дозволяє створювати гілки в коді, щоб дозволити різним розробникам працювати над різними функціями програми, та легко злити гілки пізніше.

⦁	SQL - це мова структурованих запитів, яка використовується для роботи з реляційними базами даних.
Приклади: У Java є багато бібліотек, які дозволяють розробникам працювати з базами даних, таких як MySQL та PostgreSQL. 
Розуміння SQL дозволяє розробникам зчитувати та записувати дані у базу даних.

⦁	RESTful - це архітектурний стиль для створення веб-служб, який дозволяє легко отримувати доступ до ресурсів на сервері за допомогою HTTP-запитів.
Приклади: RESTful є досить популярним підходом для створення API для веб-додатків. 
У Java є багато фреймворків, таких як Spring та Jersey, які дозволяють легко створювати RESTful API.

⦁	Servlet - це Java-компонент, який може оброблювати HTTP-запити та відповідати на них.
Приклади: У Java є вбудований контейнер сервлетів, який дозволяє розробникам створювати та запускати свої власні сервлети. 
Servlet може використовуватись для обробки форм, відправки електронної пошти та багатьох інших завдань.

⦁	JSP - це Java-технологія, яка дозволяє розробникам створювати динамічні веб-сторінки за допомогою Java-коду та HTML-шаблонів.
Приклади: JSP може бути використаний для створення веб-сайтів, які генерують вміст на основі даних з бази даних або даних, які користувачі вводять на сторінці.
 У Java є багато фреймворків, таких як Spring та Struts, які дозволяють розробникам легко створювати JSP-сторінки.

⦁	JVM - це віртуальна машина Java, яка виконує Java-кодє програма.
Приклади: Java автоматично збирає мусор, що дозволяє розробникам не займатися вручну вивільненням пам'яті,
 яке може призвести до витоку пам'яті та погіршення продуктивності. Гарбаж-колектор може бути запущений автоматично або за запитом розробника.

⦁	Exception - це об'єкт, який виникає при виникненні помилки під час виконання програми.
Приклади: У Java є багато вбудованих виключень, таких як NullPointerException та ArrayIndexOutOfBoundsException,
 які можуть виникнути при неправильному використанні коду. Розробники можуть також створювати власні виключення для обробки власних помилок.

⦁	Debugging - це процес виявлення та виправлення помилок в програмі.
Приклади: У Java є багато інструментів для відлагодження коду, таких як Eclipse, IntelliJ IDEA та NetBeans.
 Розробники можуть використовувати ці інструменти для відлагодження коду та виправлення помилок.

⦁	Unit testing - це процес тестування окремих функцій або модулів програми для перевірки їх правильності та відповідності вимогам.
Приклади: У Java є багато фреймворків для тестування, таких як JUnit та TestNG.
 Розробники можуть створювати тестові сценарії для перевірки роботи окремих функцій або модулів програми.

⦁	Integration testing - це процес тестування програми як єдиного цілого, для перевірки взаємодії між різними модулями та функціональністю програми в цілому.
Приклади: У Java є багато інструментів для інтеграційного тестування, 
таких як Selenium та TestNG. Розробники можуть створювати тестові сценарії для перевірки взаємодії між різними модулями програми та функціями

⦁	Continuous Integration (CI) - це процес автоматизованої збирання та тестування програми на кожній зміні коду, щоб відслідковувати та вирішувати проблеми швидко та ефективно.
Приклади: У Java є багато інструментів для CI, таких як Jenkins, Travis CI та CircleCI.
 Розробники можуть налаштувати ці інструменти, щоб автоматично збирати та тестувати код після кожної зміни.

⦁	Continuous Delivery (CD) - це процес автоматизованої доставки програми до кінцевих користувачів, що дозволяє знизити час від розробки до випуску та забезпечити швидку зміну та вдосконалення продукту.
Приклади: У Java є багато інструментів для CD, таких як Maven, Gradle та Ant. Розробники можуть використовувати ці інструменти, 
щоб автоматизувати процес збирання, тестування та доставки програми до кінцевих користувачів.

⦁	Maven - це інструмент для автоматизованого збирання та керування залежностями програми.
Приклади: У Java розробники можуть використовувати Maven для збирання та керування залежностями програми.
 Наприклад, для додавання бібліотеки в проект можна вказати залежність в файлі pom.xml та Maven автоматично завантажить та додаст цю бібліотеку до проекту.

⦁	Gradle - це інструмент для автоматизованого збирання та керування залежностями програми, який дозволяє швидше збирання та кращу оптимізацію проекту.
Приклади: У Java розробники можуть використовувати Gradle для збирання та керування залежностями програми. Наприклад, використовуючи Gradle,
 можна швидко збирати та публікувати проект на різних сервісах, таких як GitHub.

⦁	Ant - це інструмент для автоматизованого збирання та керування проектами на Java, який дозволяє створювати скрипти для збирання, тестування та розгортання програми.
Приклади: У Java розробники можуть використовувати Ant для створення скриптів збирання та тестування програми. Наприклад, використовуючи Ant,
 можна створити скрипт, який буде збирати проект, запускати тести та розгортати програму на сервері.

⦁	Servlet - це програма на Java, яка запускається на сервері та обробляє HTTP-запити від клієнтів.
Приклади: У Java розробники можуть використовувати Servlet для створення веб-додатків.
 Наприклад, можна створити Servlet, який буде приймати HTTP-запити від клієнтів та повертати їм відповіді.

⦁	JSP - це технологія на Java для створення динамічних веб-сторінок, яка дозволяє вбудовувати Java-код у HTML-сторінки.
Приклади: У Java розробники можуть використовувати JSP для створення динамічних веб-сторінок. Наприклад,
 можна створити JSP-сторінку, яка буде вбудовувати Java-код для відображення даних з бази даних на веб-сторінці.

⦁	JPA - це технологія на Java для роботи з об'єктно-реляційними базами даних, яка дозволяє розробникам працювати з базою даних на рівні об'єктів.
Приклади: У Java розробники можуть використовувати JPA для роботи з об'єктно-реляційними базами даних. 
Наприклад, можна використовувати JPA для зберігання та отримання даних з бази даних без написання SQL-запитів.

⦁	JUnit - це фреймворк для тестування коду на Java. JUnit дозволяє розробникам писати автоматичні тестові сценарії,
 які перевіряють коректність роботи коду та допомагають знайти його помилки.
Приклади: У Java розробники можуть використовувати JUnit для написання автоматичних тестових сценаріїв.
 Наприклад, можна використовувати JUnit для написання тестових сценаріїв, які перевіряють коректність роботи методів класів.

⦁	Mockito - це бібліотека для тестування коду на Java, яка дозволяє розробникам створювати фіктивні об'єкти, 
щоб замінити реальні об'єкти в тестових сценаріях. Mockito допомагає розробникам ізолювати код, який тестується, від залежностей та спрощує процес тестування.
Приклади: У Java розробники можуть використовувати Mockito для створення фіктивних об'єктів та ізоляції коду від залежностей. 
Наприклад, можна використовувати Mockito для тестування методів класів, які залежать від інших класів чи бібліотек.

⦁	Spring Security - це бібліотека для забезпечення безпеки додатків на Spring Framework. 
Spring Security дозволяє розробникам налаштовувати різні види аутентифікації та авторизації, забезпечувати захист від атак, налаштовувати права доступу до ресурсів та інше.
Приклади: У Java розробники можуть використовувати Spring Security для захисту додатків від несанкціонованого доступу.
 Наприклад, можна використовувати Spring Security для налаштування різних видів аутентифікації та авторизації, наприклад, авторизації користувачів з використанням бази даних або зовнішніх сервісів.

⦁	JDBC - Java Database Connectivity - це стандартний інтерфейс, що дозволяє Java-програмам взаємодіяти з реляційними базами даних.
 JDBC дозволяє виконувати SQL-запити до баз даних та отримувати результати запитів у вигляді Java-об'єктів.
Приклади: У Java розробників є можливість використовувати JDBC для зв'язку з реляційними базами даних.
 Наприклад, вони можуть використовувати JDBC для виконання запитів до бази даних та отримання результатів у вигляді Java-об'єктів, таких як ResultSet.

⦁	ORM - Object-Relational Mapping - це технологія, яка дозволяє взаємодіяти з реляційними базами даних у термінах об'єктно-орієнтованої моделі даних.
 ORM дозволяє розробникам використовувати об'єктно-орієнтовані підходи при роботі з базами даних.

Приклади: У Java розробників є можливість використовувати ORM-фреймворки, такі як Hibernate, для роботи з базами даних.
 Наприклад, вони можуть використовувати Hibernate для взаємодії з базою даних у термінах об'єктно-орієнтованої моделі даних та виконання CRUD-операцій.

⦁	JPA - Java Persistence API - це стандартний інтерфейс для роботи з об'єктно-реляційним відображенням в Java. 
JPA дозволяє розробникам використовувати об'єктно-орієнтовані підходи при роботі з базами даних.

Приклади: У Java розробників є можливість використовувати JPA для роботи з об'єктно-реляційним відображенням. 
Наприклад, вони можуть використовувати JPA для описування об'єктів, що відображають структуру таблиць у базі даних та виконання запитів до цих об'єктів за допомогою мови JPQL.

⦁	REST - Representational State Transfer - це стиль архітектури програмного забезпечення для розробки веб-додатків.
 REST дозволяє використовувати HTTP-протокол для взаємодії з веб-сервером та передавати дані у вигляді ресурсів.

Приклади: У Java розробників є можливість використовувати REST для розробки веб-додатків. 
Наприклад, вони можуть використовувати REST для взаємодії з веб-сервером за допомогою HTTP-методів GET, POST, PUT та DELETE та передачі даних у вигляді ресурсів, таких як JSON або XML.



 <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <configLocation>${maven.checkstyle.plugin.configLocation}</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <linkXRef>false</linkXRef>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

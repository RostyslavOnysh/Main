Java - Java
Object-oriented programming - Об'єктно-орієнтоване програмування
Class - Клас
Interface - Інтерфейс
Inheritance - Наслідування
Polymorphism - Поліморфізм
Abstraction - Абстракція
Encapsulation - Інкапсуляція
Приклади використання:

1. Java is a popular programming language used to develop a variety of applications.
(Java є популярною мовою програмування, якою користуються для розробки різних програм)

2. Object-oriented programming is a programming paradigm that emphasizes objects and their interactions.
(Об'єктно-орієнтоване програмування - це парадигма програмування, яка акцентує увагу на об'єктах та їх взаємодії)

3. A class is a blueprint for creating objects that share the same attributes and methods.
(Клас є шаблоном для створення об'єктів, які мають спільні атрибути та методи)

4. An interface defines a set of methods that a class must implement.
(Інтерфейс визначає набір методів, які клас повинен реалізувати)

5. Inheritance allows a subclass to inherit attributes and methods from its superclass.
(Наслідування дозволяє підкласу успадковувати атрибути та методи від його суперкласу)

6. Polymorphism allows objects to be treated as if they are of different types.
(Поліморфізм дозволяє об'єктам бути розглянутими як об'єкти різних типів)

7. Abstraction allows complex systems to be broken down into smaller, more manageable pieces.
(Абстракція дозволяє складні системи розбивати на менші, більш управляємі частини)



Variable - Змінна
Data type - Тип даних
Primitive data type - Примітивний тип даних
Reference data type - Тип даних-посилання
String - Рядок
Array - Масив
List - Список
Map - Карта
Set - Множина
Loop - Цикл
Conditional statement - Умовний оператор
Exception handling - Обробка винятків


8. A variable is a storage location for data in a Java program.
(Змінна - це місце зберігання даних в програмі Java)

9. Data types specify the type of data that can be stored in a variable.
(Типи даних вказують, який тип даних можна зберігати в змінній)

10. Primitive data types include integers, floating-point numbers, and booleans.
(Примітивні типи даних включають цілі числа, числа з плаваючою крапкою та булеві значення)

11. Reference data types include objects, arrays, and strings.
(Типи даних-посилання включають об'єкти, масиви та рядки)

12. A string is a sequence of characters in Java.
(Рядок - це послідовність символів в Java)

13. An array is a collection of elements of the same type.
(Масив - це колекція елементів одного типу)



Setter - Метод налаштування поля
Inheritance - Наслідування
Interface - Інтерфейс
Polymorphism - Поліморфізм
Encapsulation - Інкапсуляція
Abstraction - Абстракція
Static - Статичний


14. A constructor is a special method used to initialize objects in Java.
(Конструктор - це спеціальний метод, який використовується для ініціалізації об'єктів в Java)

15. A method is a set of instructions that performs a specific task in a Java program.
(Метод - це набір інструкцій, які виконують певне завдання в програмі Java)

16. A getter is a method used to access the value of a private field in a Java class.
(Метод доступу до поля - це метод, який використовується для доступу до значення приватного поля в класі Java)

17. A setter is a method used to set the value of a private field in a Java class.
(Метод налаштування поля - це метод, який використовується для задання значення приватного поля в класі Java)

18. Inheritance is a mechanism that allows one class to inherit the properties and methods of another class in Java.
(Наслідування - це механізм, який дозволяє одному класу успадковувати властивості та методи іншого класу в Java)

19. An interface is a collection of abstract methods that can be implemented by a class in Java.
(Інтерфейс - це колекція абстрактних методів, які можуть бути реалізовані класом в Java)

20. Polymorphism is a programming concept that allows objects of different types to be treated as if they were of the same type in Java.
(Поліморфізм - це програмний концепт, який дозволяє об'єктам різних типів оброблятися, якщо вони були одного типу в Java)

21. Encapsulation is a programming concept that involves keeping the implementation details of a class hidden from other classes in Java.
(Інкапсуляція - це програмний концепт, який включає зберігання деталей реалізації класу прихованими від інших класів в Java)




Exception handling - Обробка винятків
File input/output - Введення/виведення файлів
Multithreading - Багатопоточність
Generics - Узагальнення
Collections - Колекції
Lambda expressions - Вирази-лямбди
Streams - Потоки
Приклади використання:


22. Exception handling is a technique used to handle errors and exceptions that may occur during the execution of a Java program.
(Обробка винятків - це техніка, яка використовується для обробки помилок та винятків, які можуть виникнути під час виконання програми на Java)

23. File input/output is a process of reading data from or writing data to a file in a Java program.
(Введення/виведення файлів - це процес читання даних з файлу або запису даних до файлу в програмі на Java)

24. Multithreading is a technique used to perform multiple tasks simultaneously in a Java program.
(Багатопоточність - це техніка, яка використовується для виконання кількох завдань одночасно в програмі на Java)

25. Generics is a feature in Java that allows you to create classes, interfaces, and methods that can work with any data type.
(Узагальнення - це функціонал в Java, який дозволяє створювати класи, інтерфейси та методи, які можуть працювати з будь-яким типом даних)

26. Collections are data structures in Java used to store and manipulate groups of objects.
(Колекції - це структури даних в Java, які використовуються для зберігання та обробки груп об'єктів)

27. Lambda expressions are a feature in Java that allows you to write inline functions without having to define a separate method.
(Вирази-лямбди - це функціонал в Java, який дозволяє писати функції в одному рядку без необхідності визначення окремого методу)

28. Streams are a feature in Java used to process collections of objects in a functional style.
(Потоки - це функціонал в Java, який використовується для обробки колекцій об'єктів в функціональному стилі)


JDBC - Java Database Connectivity - з'єднання з базою даних на Java
JPA - Java Persistence API - API для зберігання об'єктів в базі даних
Hibernate - фреймворк для роботи з базою даних на Java
Spring framework - фреймворк для створення веб-додатків на Java
RESTful web services - веб-сервіси, які використовують REST архітектуру
Microservices - мікросервіси, підход до розробки програмного забезпечення,
 де програма розбивається на невеликі незалежні сервіси, які можуть бути розгорнуті окремо.


Maven - інструмент для автоматизації збирання та управління залежностями проекту на Java
Gradle - інструмент для автоматизації збирання та управління залежностями проекту на Java
JUnit - бібліотека для модульного тестування коду на Java
Mockito - фреймворк для підробки об'єктів під час модульного тестування на Java
Log4j - бібліотека для логування подій в програмі на Java
Приклади використання:

Maven is a popular build automation tool used in Java projects to manage dependencies and build processes.
(Maven - це популярний інструмент для автоматизації збирання та управління залежностями проекту на Java)

Gradle is another popular build automation tool used in Java projects to manage dependencies and build processes.
(Gradle - це інший популярний інструмент для автоматизації збирання та управління залежностями проекту на Java)

JUnit is a widely used testing library for writing and running unit tests for Java code.
(JUnit - це широко використовувана бібліотека для написання та запуску модульних тестів на Java)

Mockito is a framework used for creating mock objects during unit testing in Java.
(Mockito - це фреймворк, що використовується для створення підроблених об'єктів під час модульного тестування на Java)

Log4j is a logging library for Java that provides a flexible and configurable logging framework for applications.
(Log4j - це бібліотека для логування подій в програмі на Java, яка забезпечує гнучкий та налаштовуваний фреймворк для логування додатків)


